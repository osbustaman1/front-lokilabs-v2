ðŸ“¦app
â”œâ”€â”€ ðŸ“‚.vscode                # ConfiguraciÃ³n especÃ­fica del IDE
â”‚   â””â”€â”€ settings.json       # Reglas ESLint/Prettier alineadas a estÃ¡ndares militares
â”œâ”€â”€ ðŸ“‚public
â”‚   â””â”€â”€ index.html
â”œâ”€â”€ ðŸ“‚src
â”‚   â”œâ”€â”€ ðŸ“‚api               # Servicios API (Principio D: InyecciÃ³n de dependencias)
â”‚   â”‚   â”œâ”€â”€ auth.api.ts     # LÃ³gica especÃ­fica de autenticaciÃ³n
â”‚   â”‚   â””â”€â”€ httpClient.ts   # Axios instance con interceptores
â”‚   â”œâ”€â”€ ðŸ“‚assets
â”‚   â”‚   â”œâ”€â”€ ðŸ“‚fonts
â”‚   â”‚   â”œâ”€â”€ ðŸ“‚icons
â”‚   â”‚   â””â”€â”€ ðŸ“‚images
â”‚   â”œâ”€â”€ ðŸ“‚components        # (Principio S: Componentes con responsabilidad Ãºnica)
â”‚   â”‚   â”œâ”€â”€ ðŸ“‚common        # Componentes UI reutilizables (Button, Input, etc.)
â”‚   â”‚   â””â”€â”€ ðŸ“‚features      # Componentes complejos (LoginForm, DashboardCard)
â”‚   â”œâ”€â”€ ðŸ“‚contexts          # GestiÃ³n de estado global (React Context)
â”‚   â”œâ”€â”€ ðŸ“‚hooks             # Custom hooks (useAuth, useApi)
â”‚   â”œâ”€â”€ ðŸ“‚layouts           # Wrappers estructurales (AdminLayout, AuthLayout)
â”‚   â”œâ”€â”€ ðŸ“‚pages             # Vistas/rutas principales
â”‚   â”‚   â”œâ”€â”€ LoginPage.tsx
â”‚   â”‚   â”œâ”€â”€ DashboardPage.tsx
â”‚   â”‚   â””â”€â”€ ðŸ“‚products      # Ejemplo de nested routing
â”‚   â”œâ”€â”€ ðŸ“‚routes            # ConfiguraciÃ³n de enrutamiento
â”‚   â”‚   â””â”€â”€ Router.tsx
â”‚   â”œâ”€â”€ ðŸ“‚styles            # Sistema de diseÃ±o escalable
â”‚   â”‚   â”œâ”€â”€ base.css        # Variables CSS y resets
â”‚   â”‚   â””â”€â”€ themes          # Sistema multi-tema (Principio O)
â”‚   â”œâ”€â”€ ðŸ“‚types             # Definiciones TypeScript (Principio I)
â”‚   â”‚   â””â”€â”€ global.d.ts
â”‚   â”œâ”€â”€ ðŸ“‚utils             # Helpers y lÃ³gica pura
â”‚   â”‚   â”œâ”€â”€ validators.ts   # Validaciones reutilizables
â”‚   â”‚   â””â”€â”€ formatters.ts   # Formateo de datos
â”‚   â””â”€â”€ App.tsx
â”œâ”€â”€ .eslintrc               # Reglas estrictas de cÃ³digo (nivel SEAL)
â”œâ”€â”€ .prettierrc             # Formato consistente
â”œâ”€â”€ tsconfig.json           # Config TypeScript para mÃ¡xima seguridad
â””â”€â”€ yarn.lock               # GestiÃ³n de dependencias precisa (Â¡Siempre yarn!)